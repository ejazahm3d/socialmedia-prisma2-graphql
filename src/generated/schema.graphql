### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Comment {
  author: User!
  content: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input CommentCreateInput {
  author: UserCreateOneWithoutAuthorInput!
  content: String!
  createdAt: DateTime
  id: ID
  post: PostCreateOneWithoutPostInput!
  updatedAt: DateTime
}

input CommentCreateManyWithoutCommentsInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
}

input CommentCreateWithoutPostInput {
  author: UserCreateOneWithoutAuthorInput!
  content: String!
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  createDraft(authorEmail: String, content: String, title: String!): Post!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteOnePost(where: PostWhereUniqueInput!): Post
  publish(id: ID): Post
  signupUser(data: UserCreateInput!): User!
}

type Post {
  author: User
  content: String
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateOneWithoutPostInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateWithoutAuthorInput {
  comments: CommentCreateManyWithoutCommentsInput
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: UserCreateOneWithoutAuthorInput
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(after: ID, before: ID, first: Int, last: Int, skip: Int): [Comment!]!
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  hello(name: String): String!
  post(where: PostWhereUniqueInput!): Post
  posts(after: ID, before: ID, first: Int, last: Int, skip: Int): [Post!]!
}

type User {
  email: String!
  id: ID!
  name: String
  posts: [Post!]!
}

input UserCreateInput {
  comments: CommentCreateManyWithoutCommentsInput
  email: String!
  id: ID
  name: String
  posts: PostCreateManyWithoutPostsInput
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateWithoutCommentsInput {
  email: String!
  id: ID
  name: String
  posts: PostCreateManyWithoutPostsInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
